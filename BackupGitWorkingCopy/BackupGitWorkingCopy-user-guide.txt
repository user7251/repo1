This console app backs-up uncommitted files (changed files and added files) in a Git working copy.

Backup:
To backup your Git working copy, add/stage new files for the next commit because BackupGitWorkingCopy 
backs up only staged files.  Then open Git bash and run:
	$ git status | BackupGitWorkingCopy.exe "c:\your-repo" "d:\your-backup-root"
The app creates a backup folder like this:
	d:\your-backup-root\2015-04-16-1707

Optional third argument:
If you can pass a third argument, the app will append it to the backup folder name.  
You might want to include the branch name and the most recent commit ID.

Sample shell script:
	#!/usr/bin/env bash
	# run this .sh from your Git repo folder so that the git commands work
	branchId=$( git rev-parse --abbrev-ref HEAD )
	commitId=$( git rev-parse HEAD )
	git status | /c/bin/BackupGitWorkingCopy.exe "c:\path-to-repo-folder" "d:\path-to-backup-folder" $branchId-$commitId
Creates folder:
	d:\path-to-backup-folder\2015-04-22-1012-branchId1-1519d035a2392b7e5f3ec641e52fd4a2b97cf84a

Restore:
To restore a Git working copy, use Windows Explorer to copy/merge your backup folder contents into your local Git 
repo folder.

Motivation: 
Git does not have a way to backup uncommitted files (changed files and added files) in a working copy.  
Many people use "git commit" and "git push", but that pollutes your repo with backups.  Another option is to use 
"git diff", but it has an issue with Visual Studio 2010 (VS).  Sometimes, VS saves C# files as UTF-8, sometimes 
UTF-16LE.  When VS switches a file from one to the other, the "git diff" patch file says, 
"Binary files a/path1/file1.cs and b/path1/file1.cs differ," and "git apply" fails to apply the patch.
